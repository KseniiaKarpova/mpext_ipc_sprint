version: '3.9'

x-mongo-common:
  &mongo-common
  image: mongo:5.0.21
  networks:
    - application_network
  healthcheck:
    test: echo 'db.runCommand("ping").ok' | mongo $(hostname)/test --quiet
    interval: 10s
    timeout: 5s
    retries: 3
    start_period: 10s

services:

  notification_mongodb:
    image: mongo:5.0.21
    hostname: notification_mongodb
    container_name: notification_mongdb
    env_file:
      - .env
    environment:
      - MONGO_INITDB_DATABASE=${NOTIFICATIONS_MONGO_DB_NAME}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - application_network
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 1

  auth_postgres:
    image: postgres:15.5-alpine3.19
    container_name: auth_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_PORT=${AUTH_POSTGRES_PORT}
    volumes:
      - auth_pg_data:/var/lib/postgresql/data
    networks:
      - application_network
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 1

  redis:
    image: redis:7.2.3-alpine3.18
    container_name: redis
    restart: always
    env_file:
      - .env
    volumes:
      - redis_data:/data
    networks:
      - application_network

  worker_rabbit:
    env_file:
      - .env
    image: rabbitmq:3-management
    container_name: worker_rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    volumes:
      - rabbit_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status", "--quiet"]
      interval: 5s
      retries: 10
    networks:
      - application_network

  ### Mongo clusterization
  mongo_cnf_n1:
    <<: *mongo-common
    hostname: mongo_cnf_n1
    container_name: mongo_cnf_n1
    command: mongod --configsvr --replSet mongo_cnf --dbpath /data/db --port 27017 --bind_ip localhost,mongo_cnf_n1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_cnf_n1_data:/data/db

  mongo_cnf_n2:
    <<: *mongo-common
    hostname: mongo_cnf_n2
    container_name: mongo_cnf_n2
    command: mongod --configsvr --replSet mongo_cnf --dbpath /data/db --port 27017 --bind_ip localhost,mongo_cnf_n2
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_cnf_n2_data:/data/db

  config_cnf_rs:
    <<: *mongo-common
    volumes:
      - ./mongo_configs/rs_cnf_setup.js:/conf/setup.js
    command: [
      "mongosh",
      "--host",
      "mongo_cnf_n1",
      "--port",
      "27017",
      "/conf/setup.js"
    ]
    depends_on:
      mongo_cnf_n1:
        condition: service_healthy
      mongo_cnf_n2:
        condition: service_healthy

  mongo_rs1_n1:
    <<: *mongo-common
    hostname: mongo_rs1_n1
    container_name: mongo_rs1_n1
    command: mongod --shardsvr --replSet mongo_rs1 --dbpath /data/db --port 27017 --bind_ip localhost,mongo_rs1_n1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_rs1_n1_data:/data/db

  mongo_rs1_n2:
    <<: *mongo-common
    hostname: mongo_rs1_n2
    container_name: mongo_rs1_n2
    command: mongod --shardsvr --replSet mongo_rs1 --dbpath /data/db --port 27017 --bind_ip localhost,mongo_rs1_n2
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_rs1_n2_data:/data/db

  config_rs1:
    <<: *mongo-common
    volumes:
      - ./mongo_configs/rs_1_setup.js:/conf/setup.js
    command: [
      "mongosh",
      "--host",
      "mongo_rs1_n1",
      "--port",
      "27017",
      "/conf/setup.js"
    ]
    depends_on:
      mongo_rs1_n1:
        condition: service_healthy
      mongo_rs1_n2:
        condition: service_healthy

  mongo_rs2_n1:
    <<: *mongo-common
    hostname: mongo_rs2_n1
    container_name: mongo_rs2_n1
    command: mongod --shardsvr --replSet mongo_rs2 --dbpath /data/db --port 27017 --bind_ip localhost,mongo_rs2_n1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_rs2_n1_data:/data/db

  mongo_rs2_n2:
    <<: *mongo-common
    hostname: mongo_rs2_n2
    container_name: mongo_rs2_n2
    command: mongod --shardsvr --replSet mongo_rs2 --dbpath /data/db --port 27017 --bind_ip localhost,mongo_rs2_n2
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_rs2_n2_data:/data/db

  config_rs2:
    <<: *mongo-common
    volumes:
      - ./mongo_configs/rs_2_setup.js:/conf/setup.js
    command: [
      "mongosh",
      "--host",
      "mongo_rs2_n1",
      "--port",
      "27017",
      "/conf/setup.js"
    ]
    depends_on:
      mongo_rs2_n1:
        condition: service_healthy
      mongo_rs2_n2:
        condition: service_healthy

  mongos:
    <<: *mongo-common
    command: mongos --configdb mongo_cnf/mongo_cnf_n1:27017,mongo_cnf_n2:27017 --port 27017 --bind_ip localhost,mongos
    hostname: mongos
    container_name: mongos
    ports:
      - "27017:27017"
    env_file:
      - .env
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DB_NAME}
    depends_on:
      config_rs1:
        condition: service_completed_successfully
      config_rs2:
        condition: service_completed_successfully
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - application_network

  config_shared_cluster:
    <<: *mongo-common
    command: [
      "mongosh",
      "--host",
      "mongos",
      "--port",
      "27017",
      "/conf/setup.js"
    ]
    volumes:
      - ./mongo_configs/sharded_cluster_setup.js:/conf/setup.js
    depends_on:
      mongos:
        condition: service_healthy
### Mongo clusterization ended

  cinema_postgres:
    build:
      context: ./CinemaPostgres
      dockerfile: dockerfile
    container_name: cinema_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${CINEMA_POSTGRES_PASSWORD}
      - POSTGRES_USER=${CINEMA_POSTGRES_USER}
      - POSTGRES_DB=${CINEMA_POSTGRES_NAME}
    volumes:
      - cinema_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${CINEMA_POSTGRES_USER} -d ${CINEMA_POSTGRES_NAME}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - application_network


  file_postgres:
    image: postgres:15.5-alpine3.19
    container_name: postgres_file_api
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${FILE_POSTGRES_PASSWORD}
      - POSTGRES_USER=${FILE_POSTGRES_USER}
      - POSTGRES_DB=${FILE_POSTGRES_NAME}
      - POSTGRES_PORT=${FILE_POSTGRES_PORT}
    expose:
      - 5432
    volumes:
      - file_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${FILE_POSTGRES_USER} -d ${FILE_POSTGRES_NAME}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - application_network

  cinema_faker:
    build:
      context: Faker
      dockerfile: Dockerfile
    container_name: cinema_data_faker
    ports:
      - "8888:8888"
    env_file:
      - .env
    networks:
      - application_network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
        - .env
    environment:
      - MINIO_ROOT_USER=${S3_USER}
      - MINIO_ROOT_PASSWORD=${S3_PASSWORD}
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - application_network


  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
    env_file:
      - .env
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - application_network

networks:
  application_network:

volumes:
  auth_pg_data:
  redis_data:
  rabbit_data:
  mongo_rs1_n1_data:
  mongo_rs1_n2_data:
  mongo_rs2_n1_data:
  mongo_rs2_n2_data:
  mongo_cnf_n1_data:
  mongo_cnf_n2_data:
  cinema_pg_data:
  file_data:
  es_data:
  minio_data:
  static_volume:
  media_volume: